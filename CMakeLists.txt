cmake_minimum_required(VERSION 3.14)
project(Flame)

set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

set(CMAKE_MAIN_TARGET_NAME ${CMAKE_PROJECT_NAME})
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_SOURCE_DIR}/cmake)

set(FLAME_NAMESPACE ${PROJECT_NAME})
set(FLAME_INCLUDE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/include)
set(FLAME_INCLUDE_TEST_PATH ${CMAKE_CURRENT_SOURCE_DIR})
set(FLAME_CURRENT_DIR ${CMAKE_CURRENT_SOURCE_DIR})

set(FLAME_INCLUDE_SUBMODLUES_PATH ${FLAME_INCLUDE_PATH}/FlameIDE)
set(FLAME_SOURCE_SUBMODLUES_PATH ${CMAKE_CURRENT_SOURCE_DIR}/src)
set(FLAME_TEST_SUBMODLUES_PATH ${CMAKE_CURRENT_SOURCE_DIR}/tests)

include(FlameContrib)
include(CmakeFlameResolver)

function(get_sources OUTPUT_NAME)
	set(SOURCE_FILE "${CMAKE_CURRENT_SOURCE_DIR}/Sources.cmake")
	if(EXISTS ${SOURCE_FILE})
		include(${SOURCE_FILE})
		list(APPEND FILE_LIST ${SOURCE_LIST})
		unset(SOURCE_LIST)
	endif()

	set(HEADER_FILE "${CMAKE_CURRENT_SOURCE_DIR}/Headers.cmake")
	if(EXISTS ${HEADER_FILE})
		include(${HEADER_FILE})
		list(APPEND FILE_LIST ${HEADER_LIST})
		unset(HEADER_LIST)
	endif()

	set(${OUTPUT_NAME} ${FILE_LIST} PARENT_SCOPE)
endfunction()

macro(find_static_library NAME TARGET_NAME)
	set(CMAKE_FIND_LIBRARY_SUFFIXES "${FLAME_STATIC_LIBRARY_SUFFIX}")
	find_library(LIBRARY
		NAMES
			${CMAKE_FIND_LIBRARY_PREFIXES}${NAME}${CMAKE_FIND_LIBRARY_SUFFIXES}
	)
	if (LIBRARY)
		message(STATUS "Static library found - ${LIBRARY}")
		add_library(
			${CMAKE_FIND_LIBRARY_PREFIXES}${NAME}${CMAKE_FIND_LIBRARY_SUFFIXES}
			STATIC IMPORTED
		)
		set_target_properties(
			${CMAKE_FIND_LIBRARY_PREFIXES}${NAME}${CMAKE_FIND_LIBRARY_SUFFIXES}
			PROPERTIES
				IMPORTED_LOCATION ${LIBRARY}
		)
		add_library(${TARGET_NAME}
			ALIAS
				${CMAKE_FIND_LIBRARY_PREFIXES}${NAME}${CMAKE_FIND_LIBRARY_SUFFIXES}
		)
		unset(LIBRARY)
	else()
		message_fatal("Not found '${NAME}${CMAKE_FIND_LIBRARY_SUFFIXES}'")
	endif()
	unset(CMAKE_FIND_LIBRARY_SUFFIXES)
endmacro()

macro(find_shared_library NAME TARGET_NAME)
	set(CMAKE_FIND_LIBRARY_SUFFIXES ${FLAME_SHARED_LIBRARY_SUFFIX})
	find_library(LIBRARY
		NAMES
			${CMAKE_FIND_LIBRARY_PREFIXES}${NAME}${CMAKE_FIND_LIBRARY_SUFFIXES}
	)
	if (LIBRARY)
		message(STATUS "Shared library found - ${LIBRARY}")
		add_library(
			${CMAKE_FIND_LIBRARY_PREFIXES}${NAME}${CMAKE_FIND_LIBRARY_SUFFIXES}
			SHARED IMPORTED
		)
		set_target_properties(
			${CMAKE_FIND_LIBRARY_PREFIXES}${NAME}${CMAKE_FIND_LIBRARY_SUFFIXES}
			PROPERTIES
				IMPORTED_LOCATION ${LIBRARY}
		)
		add_library(${TARGET_NAME}
			ALIAS
				${CMAKE_FIND_LIBRARY_PREFIXES}${NAME}${CMAKE_FIND_LIBRARY_SUFFIXES}
		)
		unset(LIBRARY)
	else()
		message_fatal("Not found '${NAME}.${CMAKE_FIND_LIBRARY_SUFFIXES}'")
	endif()
	unset(CMAKE_FIND_LIBRARY_SUFFIXES)
endmacro()

add_subdirectory(${FLAME_INCLUDE_SUBMODLUES_PATH})
add_subdirectory(${FLAME_SOURCE_SUBMODLUES_PATH})
add_subdirectory(${FLAME_TEST_SUBMODLUES_PATH})

flame_resolve_targets()
