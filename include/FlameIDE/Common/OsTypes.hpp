#ifndef FLAMEIDE_COMMON_OSTYPES_HPP
#define FLAMEIDE_COMMON_OSTYPES_HPP

#include <FlameIDE/Common/OsTypes/Posix.hpp>
#include <FlameIDE/Common/OsTypes/Windows.hpp>

namespace flame_ide
{namespace os
{

enum class ActionType
{
	READER
	, WRITER
	, BIDIRECTIONAL
};

using FileDescriptor = FLAMEIDE_OS_NAMESPACE::OsFileDescriptor;
constexpr FileDescriptor INVALID_DESCRIPTOR =
		FLAMEIDE_OS_NAMESPACE::OS_INVALID_DESCRIPTOR;

using Status = FLAMEIDE_OS_NAMESPACE::OsStatus;
constexpr Status STATUS_SUCCESS =
		FLAMEIDE_OS_NAMESPACE::OS_STATUS_SUCCESS;

using Socket = FLAMEIDE_OS_NAMESPACE::OsSocket;
constexpr Socket SOCKET_INITIALIZER =
		FLAMEIDE_OS_NAMESPACE::OS_SOCKET_INITIALIZER;

using AsyncIoContext = FLAMEIDE_OS_NAMESPACE::OsAsyncIoContext;
constexpr AsyncIoContext ASYNC_CONTEXT_INITIALIZER =
		FLAMEIDE_OS_NAMESPACE::OS_ASYNC_CONTEXT_INITIALIZER;

using ThreadContext = FLAMEIDE_OS_NAMESPACE::OsThreadContext;
constexpr ThreadContext THREAD_CONTEXT_INITIALIZER =
		FLAMEIDE_OS_NAMESPACE::OS_THREAD_CONTEXT_INITIALIZER;
using ThreadTaskTrait = FLAMEIDE_OS_NAMESPACE::OsThreadTaskTrait;

using MutexContext = FLAMEIDE_OS_NAMESPACE::OsMutexContext;
constexpr MutexContext MUTEX_CONTEXT_INITIALIZER =
		FLAMEIDE_OS_NAMESPACE::OS_MUTEX_CONTEXT_INITIALIZER;

using SemaphoreContext = FLAMEIDE_OS_NAMESPACE::OsSemaphoreContext;
constexpr SemaphoreContext SEMAPHORE_CONTEXT_INITIALIZER =
		FLAMEIDE_OS_NAMESPACE::OS_SEMAPHORE_CONTEXT_INITIALIZER;
using SemaphoreValue = FLAMEIDE_OS_NAMESPACE::OsSemaphoreValue;
constexpr SemaphoreValue SEMAPHORE_VALUE_DEFAULT =
		FLAMEIDE_OS_NAMESPACE::OS_SEMAPHORE_VALUE_DEFAULT;
constexpr SemaphoreValue SEMAPHORE_VALUE_INVALID =
		FLAMEIDE_OS_NAMESPACE::OS_SEMAPHORE_VALUE_INVALID;
}}

#endif // FLAMEIDE_COMMON_OSTYPES_HPP
