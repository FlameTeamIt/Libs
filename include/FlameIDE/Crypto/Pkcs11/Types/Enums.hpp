#ifndef FLAMEDE_CRYPTO_PKCS11_TYPES_ENUMS_HPP
#define FLAMEDE_CRYPTO_PKCS11_TYPES_ENUMS_HPP

// OTP - one time password

#include <FlameIDE/Crypto/Pkcs11/Types/ValueTypes.hpp>
#include <FlameIDE/Common/Traits/ReferenceWrapper.hpp>

namespace flame_ide
{
namespace pkcs11
{
namespace enums
{

namespace utils
{

template<typename EnumType>
struct UnderlyingType
{
	using Type = void;
};
template<typename EnumType>
using UnderlyingTypeValue = typename UnderlyingType<EnumType>::Type;

} // namespace utils

#define UNDERLYING_TYPE(EnumType, RealType) \
	namespace utils \
	{ \
		template<> \
		struct UnderlyingType<EnumType> \
		{ \
			using Type = RealType; \
		}; \
	}

#define OPERATOR(EnumType, _OPERATOR_) \
	constexpr EnumType operator _OPERATOR_ (EnumType value1, EnumType value2) \
	{ \
		auto realValue1 = static_cast<utils::UnderlyingTypeValue<EnumType>>(value1); \
		auto realValue2 = static_cast<utils::UnderlyingTypeValue<EnumType>>(value2); \
		utils::UnderlyingTypeValue<EnumType> result = realValue1 _OPERATOR_ realValue2; \
		return static_cast<EnumType>(result); \
	}

#define FLAG_OPERATORS(EnumType) \
	OPERATOR(EnumType, &) \
	OPERATOR(EnumType, |)


/// @brief The Version enum
enum class Version : flame_ide::pkcs11::value_types::Byte
{
	MAJOR = CRYPTOKI_VERSION_MAJOR
	, MINOR = CRYPTOKI_VERSION_MINOR
	, AMENDMENT = CRYPTOKI_VERSION_AMENDMENT
};
UNDERLYING_TYPE(Version, flame_ide::pkcs11::value_types::Byte)


/// @brief The Bool enum
enum class Bool : flame_ide::pkcs11::value_types::Bool
{
	TRUE = CK_TRUE
	, FALSE = CK_FALSE
};
UNDERLYING_TYPE(Bool, flame_ide::pkcs11::value_types::Bool)


/// @brief The SpecialValue enum
enum class SpecialValue : flame_ide::pkcs11::value_types::Ulong
{
	UNAVAILABLE_INFORMATION = CK_UNAVAILABLE_INFORMATION
	, EFFECTIVELY_INFINITE = CK_EFFECTIVELY_INFINITE
	, INVALID_HANDLE = CK_INVALID_HANDLE
};
UNDERLYING_TYPE(SpecialValue, flame_ide::pkcs11::value_types::Ulong)


/// @brief The Notification enum
enum Notification : flame_ide::pkcs11::value_types::Notification
{
	SURRENDER = CKN_SURRENDER
	, OTP_CHANGED = CKN_OTP_CHANGED
};
UNDERLYING_TYPE(Notification, flame_ide::pkcs11::value_types::Notification)


/// @brief The SlotFlags enum
enum class SlotFlags : flame_ide::pkcs11::value_types::Flags
{
	TOKEN_PRESENT = CKF_TOKEN_PRESENT
	, REMOVABLE_DEVICE = CKF_REMOVABLE_DEVICE
	, HW_SLOT = CKF_HW_SLOT
};
UNDERLYING_TYPE(SlotFlags, flame_ide::pkcs11::value_types::Flags)
FLAG_OPERATORS(SlotFlags)


/// @brief The TokenInfoFlags enum
enum class TokenInfoFlags : flame_ide::pkcs11::value_types::Flags
{
	RNG = CKF_RNG
	, WRITE_PROTECTED = CKF_WRITE_PROTECTED
	, LOGIN_REQUIRED = CKF_LOGIN_REQUIRED
	, USER_PIN_INITIALIZED = CKF_USER_PIN_INITIALIZED
	, RESTORE_KEY_NOT_NEEDED = CKF_RESTORE_KEY_NOT_NEEDED
	, CLOCK_ON_TOKEN = CKF_CLOCK_ON_TOKEN
	, PROTECTED_AUTHENTICATION_PATH = CKF_PROTECTED_AUTHENTICATION_PATH
	, DUAL_CRYPTO_OPERATIONS = CKF_DUAL_CRYPTO_OPERATIONS
	, TOKEN_INITIALIZED = CKF_TOKEN_INITIALIZED
	, SECONDARY_AUTHENTICATION = CKF_SECONDARY_AUTHENTICATION
	, USER_PIN_COUNT_LOW = CKF_USER_PIN_COUNT_LOW
	, USER_PIN_FINAL_TRY = CKF_USER_PIN_FINAL_TRY
	, USER_PIN_LOCKED = CKF_USER_PIN_LOCKED
	, USER_PIN_TO_BE_CHANGED = CKF_USER_PIN_TO_BE_CHANGED
	, SO_PIN_COUNT_LOW = CKF_SO_PIN_COUNT_LOW
	, SO_PIN_FINAL_TRY = CKF_SO_PIN_FINAL_TRY
	, SO_PIN_LOCKED = CKF_SO_PIN_LOCKED
	, SO_PIN_TO_BE_CHANGED = CKF_SO_PIN_TO_BE_CHANGED
	, ERROR_STATE = CKF_ERROR_STATE
};
UNDERLYING_TYPE(TokenInfoFlags, flame_ide::pkcs11::value_types::Flags)
FLAG_OPERATORS(TokenInfoFlags)


/// @brief The User enum
enum class User : flame_ide::pkcs11::value_types::User
{
	SECURITY_OFFICER = CKU_SO
	, USER = CKU_USER
	, CONTEXT_SPECIFIC = CKU_CONTEXT_SPECIFIC
};
UNDERLYING_TYPE(User, flame_ide::pkcs11::value_types::User)


/// @brief The State enum
enum State : flame_ide::pkcs11::value_types::State
{
	RO_PUBLIC_SESSION = CKS_RO_PUBLIC_SESSION
	, RO_USER_FUNCTIONS = CKS_RO_USER_FUNCTIONS
	, RW_PUBLIC_SESSION = CKS_RW_PUBLIC_SESSION
	, RW_USER_FUNCTIONS = CKS_RW_USER_FUNCTIONS
	, RW_SO_FUNCTIONS = CKS_RW_SO_FUNCTIONS
};
UNDERLYING_TYPE(State, flame_ide::pkcs11::value_types::State)


/// @brief The SessionFlags enum
enum class SessionFlags : flame_ide::pkcs11::value_types::Flags
{
	RW_SESSION = CKF_RW_SESSION
	, SERIAL_SESSION = CKF_SERIAL_SESSION
};
UNDERLYING_TYPE(SessionFlags, flame_ide::pkcs11::value_types::Flags)
FLAG_OPERATORS(SessionFlags)


/// @brief The ObjectClass enum
enum class ObjectClass : flame_ide::pkcs11::value_types::ObjectClass
{
	DATA = CKO_DATA
	, CERTIFICATE = CKO_CERTIFICATE
	, PUBLIC_KEY = CKO_PUBLIC_KEY
	, PRIVATE_KEY = CKO_PRIVATE_KEY
	, SECRET_KEY = CKO_SECRET_KEY
	, HW_FEATURE = CKO_HW_FEATURE
	, DOMAIN_PARAMETERS = CKO_DOMAIN_PARAMETERS
	, MECHANISM = CKO_MECHANISM
	, OTP_KEY = CKO_OTP_KEY
};
UNDERLYING_TYPE(ObjectClass, flame_ide::pkcs11::value_types::ObjectClass)


/// @brief The HwFeature enum
enum class HwFeature : flame_ide::pkcs11::value_types::HwFeature
{
	MONOTONIC_COUNTER = CKH_MONOTONIC_COUNTER
	, CLOCK = CKH_CLOCK
	, USER_INTERFACE = CKH_USER_INTERFACE
	, VENDOR_DEFINED = CKH_VENDOR_DEFINED
};
UNDERLYING_TYPE(HwFeature, flame_ide::pkcs11::value_types::HwFeature)


/// @brief The Key enum
enum class Key : flame_ide::pkcs11::value_types::Key
{
	RSA = CKK_RSA
	, DSA = CKK_DSA
	, DH = CKK_DH
	, ECDSA = CKK_ECDSA
	, EC = CKK_EC
	, X9_42_DH = CKK_X9_42_DH
	, KEA = CKK_KEA
	, GENERIC_SECRET = CKK_GENERIC_SECRET
	, RC2 = CKK_RC2
	, RC4 = CKK_RC4
	, DES = CKK_DES
	, DES2 = CKK_DES2
	, DES3 = CKK_DES3
	, CAST = CKK_CAST
	, CAST3 = CKK_CAST3
	, CAST5 = CKK_CAST5
	, CAST128 = CKK_CAST128
	, RC5 = CKK_RC5
	, IDEA = CKK_IDEA
	, SKIPJACK = CKK_SKIPJACK
	, BATON = CKK_BATON
	, JUNIPER = CKK_JUNIPER
	, CDMF = CKK_CDMF
	, AES = CKK_AES
	, BLOWFISH = CKK_BLOWFISH
	, TWOFISH = CKK_TWOFISH
	, SECURID = CKK_SECURID
	, HOTP = CKK_HOTP
	, ACTI = CKK_ACTI
	, CAMELLIA = CKK_CAMELLIA
	, ARIA = CKK_ARIA

	, MD5_HMAC = CKK_MD5_HMAC
	, SHA_1_HMAC = CKK_SHA_1_HMAC
	, RIPEMD128_HMAC = CKK_RIPEMD128_HMAC
	, RIPEMD160_HMAC = CKK_RIPEMD160_HMAC
	, SHA256_HMAC = CKK_SHA256_HMAC
	, SHA384_HMAC = CKK_SHA384_HMAC
	, SHA512_HMAC = CKK_SHA512_HMAC
	, SHA224_HMAC = CKK_SHA224_HMAC

	, SEED = CKK_SEED
	, GOSTR3410 = CKK_GOSTR3410
	, GOSTR3411 = CKK_GOSTR3411
	, GOST28147 = CKK_GOST28147

	, VENDOR_DEFINED = CKK_VENDOR_DEFINED
};
UNDERLYING_TYPE(Key, flame_ide::pkcs11::value_types::Key)


/// @brief The CertificateCategory enum
enum class CertificateCategory : flame_ide::pkcs11::value_types::Ulong
{
	UNSPECIFIED = CK_CERTIFICATE_CATEGORY_UNSPECIFIED
	, TOKEN_USER = CK_CERTIFICATE_CATEGORY_TOKEN_USER
	, AUTHORITY = CK_CERTIFICATE_CATEGORY_AUTHORITY
	, OTHER_ENTITY = CK_CERTIFICATE_CATEGORY_OTHER_ENTITY
};
UNDERLYING_TYPE(CertificateCategory, flame_ide::pkcs11::value_types::Ulong)


/// @brief The SecurityDomain enum
enum class SecurityDomain : flame_ide::pkcs11::value_types::Ulong
{
	UNSPECIFIED = CK_SECURITY_DOMAIN_UNSPECIFIED
	, MANUFACTURER = CK_SECURITY_DOMAIN_MANUFACTURER
	, OPERATOR = CK_SECURITY_DOMAIN_OPERATOR
	, THIRD_PARTY = CK_SECURITY_DOMAIN_THIRD_PARTY
};
UNDERLYING_TYPE(SecurityDomain, flame_ide::pkcs11::value_types::Ulong)

/// @brief The Certificate enum
enum class Certificate : flame_ide::pkcs11::value_types::Certificate
{
	X_509 = CKC_X_509
	, X_509_ATTR_CERT = CKC_X_509_ATTR_CERT
	, WTLS = CKC_WTLS
	, VENDOR_DEFINED = CKC_VENDOR_DEFINED
};
UNDERLYING_TYPE(Certificate, flame_ide::pkcs11::value_types::Certificate)


/// @brief The AttributeFlags enum
enum class AttributeFlags : flame_ide::pkcs11::value_types::Flags
{
	ARRAY_ATTRIBUTE = CKF_ARRAY_ATTRIBUTE
};
UNDERLYING_TYPE(AttributeFlags, flame_ide::pkcs11::value_types::Flags)
FLAG_OPERATORS(AttributeFlags)


/// @brief The OtpFormat enum
enum class OtpFormat : flame_ide::pkcs11::value_types::Ulong
{
	DECIMAL = CK_OTP_FORMAT_DECIMAL
	, HEXADECIMAL = CK_OTP_FORMAT_HEXADECIMAL
	, ALPHANUMERIC = CK_OTP_FORMAT_ALPHANUMERIC
	, BINARY = CK_OTP_FORMAT_BINARY
};
UNDERLYING_TYPE(OtpFormat, flame_ide::pkcs11::value_types::Ulong)


/// @brief The OtpParam enum
enum class OtpParamAttributes : flame_ide::pkcs11::value_types::Ulong
{
	IGNORED = CK_OTP_PARAM_IGNORED
	, OPTIONAL = CK_OTP_PARAM_OPTIONAL
	, MANDATORY = CK_OTP_PARAM_MANDATORY
};
UNDERLYING_TYPE(OtpParamAttributes, flame_ide::pkcs11::value_types::Ulong)


/// @brief The Attribute enum
enum class Attribute : flame_ide::pkcs11::value_types::Attribute
{
	CLASS = CKA_CLASS
	, TOKEN = CKA_TOKEN
	, PRIVATE = CKA_PRIVATE
	, LABEL = CKA_LABEL
	, APPLICATION = CKA_APPLICATION
	, VALUE = CKA_VALUE
	, OBJECT_ID = CKA_OBJECT_ID
	, CERTIFICATE_TYPE = CKA_CERTIFICATE_TYPE
	, ISSUER = CKA_ISSUER
	, SERIAL_NUMBER = CKA_SERIAL_NUMBER
	, AC_ISSUER = CKA_AC_ISSUER
	, OWNER = CKA_OWNER
	, ATTR_TYPES = CKA_ATTR_TYPES
	, TRUSTED = CKA_TRUSTED

	, CERTIFICATE_CATEGORY = CKA_CERTIFICATE_CATEGORY
	, JAVA_MIDP_SECURITY_DOMAIN = CKA_JAVA_MIDP_SECURITY_DOMAIN
	, URL = CKA_URL
	, HASH_OF_SUBJECT_PUBLIC_KEY = CKA_HASH_OF_SUBJECT_PUBLIC_KEY
	, HASH_OF_ISSUER_PUBLIC_KEY = CKA_HASH_OF_ISSUER_PUBLIC_KEY
	, NAME_HASH_ALGORITHM = CKA_NAME_HASH_ALGORITHM
	, CHECK_VALUE = CKA_CHECK_VALUE

	, KEY_TYPE = CKA_KEY_TYPE
	, SUBJECT = CKA_SUBJECT
	, ID = CKA_ID
	, SENSITIVE = CKA_SENSITIVE
	, ENCRYPT = CKA_ENCRYPT
	, DECRYPT = CKA_DECRYPT
	, WRAP = CKA_WRAP
	, UNWRAP = CKA_UNWRAP
	, SIGN = CKA_SIGN
	, SIGN_RECOVER = CKA_SIGN_RECOVER
	, VERIFY = CKA_VERIFY
	, VERIFY_RECOVER = CKA_VERIFY_RECOVER
	, DERIVE = CKA_DERIVE
	, START_DATE = CKA_START_DATE
	, END_DATE = CKA_END_DATE
	, MODULUS = CKA_MODULUS
	, MODULUS_BITS = CKA_MODULUS_BITS
	, PUBLIC_EXPONENT = CKA_PUBLIC_EXPONENT
	, PRIVATE_EXPONENT = CKA_PRIVATE_EXPONENT
	, PRIME_1 = CKA_PRIME_1
	, PRIME_2 = CKA_PRIME_2
	, EXPONENT_1 = CKA_EXPONENT_1
	, EXPONENT_2 = CKA_EXPONENT_2
	, COEFFICIENT = CKA_COEFFICIENT
	, PUBLIC_KEY_INFO = CKA_PUBLIC_KEY_INFO
	, PRIME = CKA_PRIME
	, SUBPRIME = CKA_SUBPRIME
	, BASE = CKA_BASE

	, PRIME_BITS = CKA_PRIME_BITS
	, SUBPRIME_BITS = CKA_SUBPRIME_BITS
	, SUB_PRIME_BITS = CKA_SUB_PRIME_BITS

	, VALUE_BITS = CKA_VALUE_BITS
	, VALUE_LEN = CKA_VALUE_LEN
	, EXTRACTABLE = CKA_EXTRACTABLE
	, LOCAL = CKA_LOCAL
	, NEVER_EXTRACTABLE = CKA_NEVER_EXTRACTABLE
	, ALWAYS_SENSITIVE = CKA_ALWAYS_SENSITIVE
	, KEY_GEN_MECHANISM = CKA_KEY_GEN_MECHANISM

	, MODIFIABLE = CKA_MODIFIABLE
	, COPYABLE = CKA_COPYABLE

	, DESTROYABLE = CKA_DESTROYABLE

	, ECDSA_PARAMS = CKA_ECDSA_PARAMS
	, EC_PARAMS = CKA_EC_PARAMS

	, EC_POINT = CKA_EC_POINT

	, SECONDARY_AUTH = CKA_SECONDARY_AUTH
	, AUTH_PIN_FLAGS = CKA_AUTH_PIN_FLAGS

	, ALWAYS_AUTHENTICATE = CKA_ALWAYS_AUTHENTICATE

	, WRAP_WITH_TRUSTED = CKA_WRAP_WITH_TRUSTED
	, WRAP_TEMPLATE = CKA_WRAP_TEMPLATE
	, UNWRAP_TEMPLATE = CKA_UNWRAP_TEMPLATE
	, DERIVE_TEMPLATE = CKA_DERIVE_TEMPLATE

	, OTP_FORMAT = CKA_OTP_FORMAT
	, OTP_LENGTH = CKA_OTP_LENGTH
	, OTP_TIME_INTERVAL = CKA_OTP_TIME_INTERVAL
	, OTP_USER_FRIENDLY_MODE = CKA_OTP_USER_FRIENDLY_MODE
	, OTP_CHALLENGE_REQUIREMENT = CKA_OTP_CHALLENGE_REQUIREMENT
	, OTP_TIME_REQUIREMENT = CKA_OTP_TIME_REQUIREMENT
	, OTP_COUNTER_REQUIREMENT = CKA_OTP_COUNTER_REQUIREMENT
	, OTP_PIN_REQUIREMENT = CKA_OTP_PIN_REQUIREMENT
	, OTP_COUNTER = CKA_OTP_COUNTER
	, OTP_TIME = CKA_OTP_TIME
	, OTP_USER_IDENTIFIER = CKA_OTP_USER_IDENTIFIER
	, OTP_SERVICE_IDENTIFIER = CKA_OTP_SERVICE_IDENTIFIER
	, OTP_SERVICE_LOGO = CKA_OTP_SERVICE_LOGO
	, OTP_SERVICE_LOGO_TYPE = CKA_OTP_SERVICE_LOGO_TYPE

	, GOSTR3410_PARAMS = CKA_GOSTR3410_PARAMS
	, GOSTR3411_PARAMS = CKA_GOSTR3411_PARAMS
	, GOST28147_PARAMS = CKA_GOST28147_PARAMS

	, HW_FEATURE_TYPE = CKA_HW_FEATURE_TYPE
	, RESET_ON_INIT = CKA_RESET_ON_INIT
	, HAS_RESET = CKA_HAS_RESET

	, PIXEL_X = CKA_PIXEL_X
	, PIXEL_Y = CKA_PIXEL_Y
	, RESOLUTION = CKA_RESOLUTION
	, CHAR_ROWS = CKA_CHAR_ROWS
	, CHAR_COLUMNS = CKA_CHAR_COLUMNS
	, COLOR = CKA_COLOR
	, BITS_PER_PIXEL = CKA_BITS_PER_PIXEL
	, CHAR_SETS = CKA_CHAR_SETS
	, ENCODING_METHODS = CKA_ENCODING_METHODS
	, MIME_TYPES = CKA_MIME_TYPES
	, MECHANISM_TYPE = CKA_MECHANISM_TYPE
	, REQUIRED_CMS_ATTRIBUTES = CKA_REQUIRED_CMS_ATTRIBUTES
	, DEFAULT_CMS_ATTRIBUTES = CKA_DEFAULT_CMS_ATTRIBUTES
	, SUPPORTED_CMS_ATTRIBUTES = CKA_SUPPORTED_CMS_ATTRIBUTES
	, ALLOWED_MECHANISMS = CKA_ALLOWED_MECHANISMS

	, VENDOR_DEFINED = CKA_VENDOR_DEFINED
};
UNDERLYING_TYPE(Attribute, flame_ide::pkcs11::value_types::Attribute)


/// @brief The Mechanism enum
enum class Mechanism : flame_ide::pkcs11::value_types::Mechanism
{
	RSA_PKCS_KEY_PAIR_GEN = CKM_RSA_PKCS_KEY_PAIR_GEN
	, RSA_PKCS = CKM_RSA_PKCS
	, RSA_9796 = CKM_RSA_9796
	, RSA_X_509 = CKM_RSA_X_509

	, MD2_RSA_PKCS = CKM_MD2_RSA_PKCS
	, MD5_RSA_PKCS = CKM_MD5_RSA_PKCS
	, SHA1_RSA_PKCS = CKM_SHA1_RSA_PKCS

	, RIPEMD128_RSA_PKCS = CKM_RIPEMD128_RSA_PKCS
	, RIPEMD160_RSA_PKCS = CKM_RIPEMD160_RSA_PKCS
	, RSA_PKCS_OAEP = CKM_RSA_PKCS_OAEP

	, RSA_X9_31_KEY_PAIR_GEN = CKM_RSA_X9_31_KEY_PAIR_GEN
	, RSA_X9_31 = CKM_RSA_X9_31
	, SHA1_RSA_X9_31 = CKM_SHA1_RSA_X9_31
	, RSA_PKCS_PSS = CKM_RSA_PKCS_PSS
	, SHA1_RSA_PKCS_PSS = CKM_SHA1_RSA_PKCS_PSS

	, DSA_KEY_PAIR_GEN = CKM_DSA_KEY_PAIR_GEN
	, DSA = CKM_DSA
	, DSA_SHA1 = CKM_DSA_SHA1
	, DSA_SHA224 = CKM_DSA_SHA224
	, DSA_SHA256 = CKM_DSA_SHA256
	, DSA_SHA384 = CKM_DSA_SHA384
	, DSA_SHA512 = CKM_DSA_SHA512

	, DH_PKCS_KEY_PAIR_GEN = CKM_DH_PKCS_KEY_PAIR_GEN
	, DH_PKCS_DERIVE = CKM_DH_PKCS_DERIVE

	, X9_42_DH_KEY_PAIR_GEN = CKM_X9_42_DH_KEY_PAIR_GEN
	, X9_42_DH_DERIVE = CKM_X9_42_DH_DERIVE
	, X9_42_DH_HYBRID_DERIVE = CKM_X9_42_DH_HYBRID_DERIVE
	, X9_42_MQV_DERIVE = CKM_X9_42_MQV_DERIVE

	, SHA256_RSA_PKCS = CKM_SHA256_RSA_PKCS
	, SHA384_RSA_PKCS = CKM_SHA384_RSA_PKCS
	, SHA512_RSA_PKCS = CKM_SHA512_RSA_PKCS
	, SHA256_RSA_PKCS_PSS = CKM_SHA256_RSA_PKCS_PSS
	, SHA384_RSA_PKCS_PSS = CKM_SHA384_RSA_PKCS_PSS
	, SHA512_RSA_PKCS_PSS = CKM_SHA512_RSA_PKCS_PSS

	, SHA224_RSA_PKCS = CKM_SHA224_RSA_PKCS
	, SHA224_RSA_PKCS_PSS = CKM_SHA224_RSA_PKCS_PSS

	, SHA512_224 = CKM_SHA512_224
	, SHA512_224_HMAC = CKM_SHA512_224_HMAC
	, SHA512_224_HMAC_GENERAL = CKM_SHA512_224_HMAC_GENERAL
	, SHA512_224_KEY_DERIVATION = CKM_SHA512_224_KEY_DERIVATION
	, SHA512_256 = CKM_SHA512_256
	, SHA512_256_HMAC = CKM_SHA512_256_HMAC
	, SHA512_256_HMAC_GENERAL = CKM_SHA512_256_HMAC_GENERAL
	, SHA512_256_KEY_DERIVATION = CKM_SHA512_256_KEY_DERIVATION

	, SHA512_T = CKM_SHA512_T
	, SHA512_T_HMAC = CKM_SHA512_T_HMAC
	, SHA512_T_HMAC_GENERAL = CKM_SHA512_T_HMAC_GENERAL
	, SHA512_T_KEY_DERIVATION = CKM_SHA512_T_KEY_DERIVATION

	, RC2_KEY_GEN = CKM_RC2_KEY_GEN
	, RC2_ECB = CKM_RC2_ECB
	, RC2_CBC = CKM_RC2_CBC
	, RC2_MAC = CKM_RC2_MAC

	, RC2_MAC_GENERAL = CKM_RC2_MAC_GENERAL
	, RC2_CBC_PAD = CKM_RC2_CBC_PAD

	, RC4_KEY_GEN = CKM_RC4_KEY_GEN
	, RC4 = CKM_RC4
	, DES_KEY_GEN = CKM_DES_KEY_GEN
	, DES_ECB = CKM_DES_ECB
	, DES_CBC = CKM_DES_CBC
	, DES_MAC = CKM_DES_MAC

	, DES_MAC_GENERAL = CKM_DES_MAC_GENERAL
	, DES_CBC_PAD = CKM_DES_CBC_PAD

	, DES2_KEY_GEN = CKM_DES2_KEY_GEN
	, DES3_KEY_GEN = CKM_DES3_KEY_GEN
	, DES3_ECB = CKM_DES3_ECB
	, DES3_CBC = CKM_DES3_CBC
	, DES3_MAC = CKM_DES3_MAC

	, DES3_MAC_GENERAL = CKM_DES3_MAC_GENERAL
	, DES3_CBC_PAD = CKM_DES3_CBC_PAD
	, DES3_CMAC_GENERAL = CKM_DES3_CMAC_GENERAL
	, DES3_CMAC = CKM_DES3_CMAC
	, CDMF_KEY_GEN = CKM_CDMF_KEY_GEN
	, CDMF_ECB = CKM_CDMF_ECB
	, CDMF_CBC = CKM_CDMF_CBC
	, CDMF_MAC = CKM_CDMF_MAC
	, CDMF_MAC_GENERAL = CKM_CDMF_MAC_GENERAL
	, CDMF_CBC_PAD = CKM_CDMF_CBC_PAD

	, DES_OFB64 = CKM_DES_OFB64
	, DES_OFB8 = CKM_DES_OFB8
	, DES_CFB64 = CKM_DES_CFB64
	, DES_CFB8 = CKM_DES_CFB8

	, MD2 = CKM_MD2

	, MD2_HMAC = CKM_MD2_HMAC
	, MD2_HMAC_GENERAL = CKM_MD2_HMAC_GENERAL

	, MD5 = CKM_MD5

	, MD5_HMAC = CKM_MD5_HMAC
	, MD5_HMAC_GENERAL = CKM_MD5_HMAC_GENERAL

	, SHA_1 = CKM_SHA_1

	, SHA_1_HMAC = CKM_SHA_1_HMAC
	, SHA_1_HMAC_GENERAL = CKM_SHA_1_HMAC_GENERAL

	, RIPEMD128 = CKM_RIPEMD128
	, RIPEMD128_HMAC = CKM_RIPEMD128_HMAC
	, RIPEMD128_HMAC_GENERAL = CKM_RIPEMD128_HMAC_GENERAL
	, RIPEMD160 = CKM_RIPEMD160
	, RIPEMD160_HMAC = CKM_RIPEMD160_HMAC
	, RIPEMD160_HMAC_GENERAL = CKM_RIPEMD160_HMAC_GENERAL

	, SHA256 = CKM_SHA256
	, SHA256_HMAC = CKM_SHA256_HMAC
	, SHA256_HMAC_GENERAL = CKM_SHA256_HMAC_GENERAL
	, SHA224 = CKM_SHA224
	, SHA224_HMAC = CKM_SHA224_HMAC
	, SHA224_HMAC_GENERAL = CKM_SHA224_HMAC_GENERAL
	, SHA384 = CKM_SHA384
	, SHA384_HMAC = CKM_SHA384_HMAC
	, SHA384_HMAC_GENERAL = CKM_SHA384_HMAC_GENERAL
	, SHA512 = CKM_SHA512
	, SHA512_HMAC = CKM_SHA512_HMAC
	, SHA512_HMAC_GENERAL = CKM_SHA512_HMAC_GENERAL
	, SECURID_KEY_GEN = CKM_SECURID_KEY_GEN
	, SECURID = CKM_SECURID
	, HOTP_KEY_GEN = CKM_HOTP_KEY_GEN
	, HOTP = CKM_HOTP
	, ACTI = CKM_ACTI
	, ACTI_KEY_GEN = CKM_ACTI_KEY_GEN

	, CAST_KEY_GEN = CKM_CAST_KEY_GEN
	, CAST_ECB = CKM_CAST_ECB
	, CAST_CBC = CKM_CAST_CBC
	, CAST_MAC = CKM_CAST_MAC
	, CAST_MAC_GENERAL = CKM_CAST_MAC_GENERAL
	, CAST_CBC_PAD = CKM_CAST_CBC_PAD
	, CAST3_KEY_GEN = CKM_CAST3_KEY_GEN
	, CAST3_ECB = CKM_CAST3_ECB
	, CAST3_CBC = CKM_CAST3_CBC
	, CAST3_MAC = CKM_CAST3_MAC
	, CAST3_MAC_GENERAL = CKM_CAST3_MAC_GENERAL
	, CAST3_CBC_PAD = CKM_CAST3_CBC_PAD

	, CAST5_KEY_GEN = CKM_CAST5_KEY_GEN
	, CAST128_KEY_GEN = CKM_CAST128_KEY_GEN
	, CAST5_ECB = CKM_CAST5_ECB
	, CAST128_ECB = CKM_CAST128_ECB
	, CAST5_CBC = CKM_CAST5_CBC
	, CAST128_CBC = CKM_CAST128_CBC
	, CAST5_MAC = CKM_CAST5_MAC
	, CAST128_MAC = CKM_CAST128_MAC
	, CAST5_MAC_GENERAL = CKM_CAST5_MAC_GENERAL
	, CAST128_MAC_GENERAL = CKM_CAST128_MAC_GENERAL
	, CAST5_CBC_PAD = CKM_CAST5_CBC_PAD
	, CAST128_CBC_PAD = CKM_CAST128_CBC_PAD
	, RC5_KEY_GEN = CKM_RC5_KEY_GEN
	, RC5_ECB = CKM_RC5_ECB
	, RC5_CBC = CKM_RC5_CBC
	, RC5_MAC = CKM_RC5_MAC
	, RC5_MAC_GENERAL = CKM_RC5_MAC_GENERAL
	, RC5_CBC_PAD = CKM_RC5_CBC_PAD
	, IDEA_KEY_GEN = CKM_IDEA_KEY_GEN
	, IDEA_ECB = CKM_IDEA_ECB
	, IDEA_CBC = CKM_IDEA_CBC
	, IDEA_MAC = CKM_IDEA_MAC
	, IDEA_MAC_GENERAL = CKM_IDEA_MAC_GENERAL
	, IDEA_CBC_PAD = CKM_IDEA_CBC_PAD
	, GENERIC_SECRET_KEY_GEN = CKM_GENERIC_SECRET_KEY_GEN
	, CONCATENATE_BASE_AND_KEY = CKM_CONCATENATE_BASE_AND_KEY
	, CONCATENATE_BASE_AND_DATA = CKM_CONCATENATE_BASE_AND_DATA
	, CONCATENATE_DATA_AND_BASE = CKM_CONCATENATE_DATA_AND_BASE
	, XOR_BASE_AND_DATA = CKM_XOR_BASE_AND_DATA
	, EXTRACT_KEY_FROM_KEY = CKM_EXTRACT_KEY_FROM_KEY
	, SSL3_PRE_MASTER_KEY_GEN = CKM_SSL3_PRE_MASTER_KEY_GEN
	, SSL3_MASTER_KEY_DERIVE = CKM_SSL3_MASTER_KEY_DERIVE
	, SSL3_KEY_AND_MAC_DERIVE = CKM_SSL3_KEY_AND_MAC_DERIVE

	, SSL3_MASTER_KEY_DERIVE_DH = CKM_SSL3_MASTER_KEY_DERIVE_DH
	, TLS_PRE_MASTER_KEY_GEN = CKM_TLS_PRE_MASTER_KEY_GEN
	, TLS_MASTER_KEY_DERIVE = CKM_TLS_MASTER_KEY_DERIVE
	, TLS_KEY_AND_MAC_DERIVE = CKM_TLS_KEY_AND_MAC_DERIVE
	, TLS_MASTER_KEY_DERIVE_DH = CKM_TLS_MASTER_KEY_DERIVE_DH

	, TLS_PRF = CKM_TLS_PRF

	, SSL3_MD5_MAC = CKM_SSL3_MD5_MAC
	, SSL3_SHA1_MAC = CKM_SSL3_SHA1_MAC
	, MD5_KEY_DERIVATION = CKM_MD5_KEY_DERIVATION
	, MD2_KEY_DERIVATION = CKM_MD2_KEY_DERIVATION
	, SHA1_KEY_DERIVATION = CKM_SHA1_KEY_DERIVATION

	, SHA256_KEY_DERIVATION = CKM_SHA256_KEY_DERIVATION
	, SHA384_KEY_DERIVATION = CKM_SHA384_KEY_DERIVATION
	, SHA512_KEY_DERIVATION = CKM_SHA512_KEY_DERIVATION
	, SHA224_KEY_DERIVATION = CKM_SHA224_KEY_DERIVATION

	, PBE_MD2_DES_CBC = CKM_PBE_MD2_DES_CBC
	, PBE_MD5_DES_CBC = CKM_PBE_MD5_DES_CBC
	, PBE_MD5_CAST_CBC = CKM_PBE_MD5_CAST_CBC
	, PBE_MD5_CAST3_CBC = CKM_PBE_MD5_CAST3_CBC
	, PBE_MD5_CAST5_CBC = CKM_PBE_MD5_CAST5_CBC
	, PBE_MD5_CAST128_CBC = CKM_PBE_MD5_CAST128_CBC
	, PBE_SHA1_CAST5_CBC = CKM_PBE_SHA1_CAST5_CBC
	, PBE_SHA1_CAST128_CBC = CKM_PBE_SHA1_CAST128_CBC
	, PBE_SHA1_RC4_128 = CKM_PBE_SHA1_RC4_128
	, PBE_SHA1_RC4_40 = CKM_PBE_SHA1_RC4_40
	, PBE_SHA1_DES3_EDE_CBC = CKM_PBE_SHA1_DES3_EDE_CBC
	, PBE_SHA1_DES2_EDE_CBC = CKM_PBE_SHA1_DES2_EDE_CBC
	, PBE_SHA1_RC2_128_CBC = CKM_PBE_SHA1_RC2_128_CBC
	, PBE_SHA1_RC2_40_CBC = CKM_PBE_SHA1_RC2_40_CBC

	, PKCS5_PBKD2 = CKM_PKCS5_PBKD2

	, PBA_SHA1_WITH_SHA1_HMAC = CKM_PBA_SHA1_WITH_SHA1_HMAC

	, WTLS_PRE_MASTER_KEY_GEN = CKM_WTLS_PRE_MASTER_KEY_GEN
	, WTLS_MASTER_KEY_DERIVE = CKM_WTLS_MASTER_KEY_DERIVE
	, WTLS_MASTER_KEY_DERIVE_DH_ECC = CKM_WTLS_MASTER_KEY_DERIVE_DH_ECC
	, WTLS_PRF = CKM_WTLS_PRF
	, WTLS_SERVER_KEY_AND_MAC_DERIVE = CKM_WTLS_SERVER_KEY_AND_MAC_DERIVE
	, WTLS_CLIENT_KEY_AND_MAC_DERIVE = CKM_WTLS_CLIENT_KEY_AND_MAC_DERIVE

	, TLS10_MAC_SERVER = CKM_TLS10_MAC_SERVER
	, TLS10_MAC_CLIENT = CKM_TLS10_MAC_CLIENT
	, TLS12_MAC = CKM_TLS12_MAC
	, TLS12_KDF = CKM_TLS12_KDF
	, TLS12_MASTER_KEY_DERIVE = CKM_TLS12_MASTER_KEY_DERIVE
	, TLS12_KEY_AND_MAC_DERIVE = CKM_TLS12_KEY_AND_MAC_DERIVE
	, TLS12_MASTER_KEY_DERIVE_DH = CKM_TLS12_MASTER_KEY_DERIVE_DH
	, TLS12_KEY_SAFE_DERIVE = CKM_TLS12_KEY_SAFE_DERIVE
	, TLS_MAC = CKM_TLS_MAC
	, TLS_KDF = CKM_TLS_KDF

	, KEY_WRAP_LYNKS = CKM_KEY_WRAP_LYNKS
	, KEY_WRAP_SET_OAEP = CKM_KEY_WRAP_SET_OAEP

	, CMS_SIG = CKM_CMS_SIG
	, KIP_DERIVE = CKM_KIP_DERIVE
	, KIP_WRAP = CKM_KIP_WRAP
	, KIP_MAC = CKM_KIP_MAC

	, CAMELLIA_KEY_GEN = CKM_CAMELLIA_KEY_GEN
	, CAMELLIA_ECB = CKM_CAMELLIA_ECB
	, CAMELLIA_CBC = CKM_CAMELLIA_CBC
	, CAMELLIA_MAC = CKM_CAMELLIA_MAC
	, CAMELLIA_MAC_GENERAL = CKM_CAMELLIA_MAC_GENERAL
	, CAMELLIA_CBC_PAD = CKM_CAMELLIA_CBC_PAD
	, CAMELLIA_ECB_ENCRYPT_DATA = CKM_CAMELLIA_ECB_ENCRYPT_DATA
	, CAMELLIA_CBC_ENCRYPT_DATA = CKM_CAMELLIA_CBC_ENCRYPT_DATA
	, CAMELLIA_CTR = CKM_CAMELLIA_CTR

	, ARIA_KEY_GEN = CKM_ARIA_KEY_GEN
	, ARIA_ECB = CKM_ARIA_ECB
	, ARIA_CBC = CKM_ARIA_CBC
	, ARIA_MAC = CKM_ARIA_MAC
	, ARIA_MAC_GENERAL = CKM_ARIA_MAC_GENERAL
	, ARIA_CBC_PAD = CKM_ARIA_CBC_PAD
	, ARIA_ECB_ENCRYPT_DATA = CKM_ARIA_ECB_ENCRYPT_DATA
	, ARIA_CBC_ENCRYPT_DATA = CKM_ARIA_CBC_ENCRYPT_DATA

	, SEED_KEY_GEN = CKM_SEED_KEY_GEN
	, SEED_ECB = CKM_SEED_ECB
	, SEED_CBC = CKM_SEED_CBC
	, SEED_MAC = CKM_SEED_MAC
	, SEED_MAC_GENERAL = CKM_SEED_MAC_GENERAL
	, SEED_CBC_PAD = CKM_SEED_CBC_PAD
	, SEED_ECB_ENCRYPT_DATA = CKM_SEED_ECB_ENCRYPT_DATA
	, SEED_CBC_ENCRYPT_DATA = CKM_SEED_CBC_ENCRYPT_DATA

	, SKIPJACK_KEY_GEN = CKM_SKIPJACK_KEY_GEN
	, SKIPJACK_ECB64 = CKM_SKIPJACK_ECB64
	, SKIPJACK_CBC64 = CKM_SKIPJACK_CBC64
	, SKIPJACK_OFB64 = CKM_SKIPJACK_OFB64
	, SKIPJACK_CFB64 = CKM_SKIPJACK_CFB64
	, SKIPJACK_CFB32 = CKM_SKIPJACK_CFB32
	, SKIPJACK_CFB16 = CKM_SKIPJACK_CFB16
	, SKIPJACK_CFB8 = CKM_SKIPJACK_CFB8
	, SKIPJACK_WRAP = CKM_SKIPJACK_WRAP
	, SKIPJACK_PRIVATE_WRAP = CKM_SKIPJACK_PRIVATE_WRAP
	, SKIPJACK_RELAYX = CKM_SKIPJACK_RELAYX
	, KEA_KEY_PAIR_GEN = CKM_KEA_KEY_PAIR_GEN
	, KEA_KEY_DERIVE = CKM_KEA_KEY_DERIVE
	, KEA_DERIVE = CKM_KEA_DERIVE
	, FORTEZZA_TIMESTAMP = CKM_FORTEZZA_TIMESTAMP
	, BATON_KEY_GEN = CKM_BATON_KEY_GEN
	, BATON_ECB128 = CKM_BATON_ECB128
	, BATON_ECB96 = CKM_BATON_ECB96
	, BATON_CBC128 = CKM_BATON_CBC128
	, BATON_COUNTER = CKM_BATON_COUNTER
	, BATON_SHUFFLE = CKM_BATON_SHUFFLE
	, BATON_WRAP = CKM_BATON_WRAP

	, ECDSA_KEY_PAIR_GEN = CKM_ECDSA_KEY_PAIR_GEN
	, EC_KEY_PAIR_GEN = CKM_EC_KEY_PAIR_GEN

	, ECDSA = CKM_ECDSA
	, ECDSA_SHA1 = CKM_ECDSA_SHA1
	, ECDSA_SHA224 = CKM_ECDSA_SHA224
	, ECDSA_SHA256 = CKM_ECDSA_SHA256
	, ECDSA_SHA384 = CKM_ECDSA_SHA384
	, ECDSA_SHA512 = CKM_ECDSA_SHA512

	, ECDH1_DERIVE = CKM_ECDH1_DERIVE
	, ECDH1_COFACTOR_DERIVE = CKM_ECDH1_COFACTOR_DERIVE
	, ECMQV_DERIVE = CKM_ECMQV_DERIVE

	, ECDH_AES_KEY_WRAP = CKM_ECDH_AES_KEY_WRAP
	, RSA_AES_KEY_WRAP = CKM_RSA_AES_KEY_WRAP

	, JUNIPER_KEY_GEN = CKM_JUNIPER_KEY_GEN
	, JUNIPER_ECB128 = CKM_JUNIPER_ECB128
	, JUNIPER_CBC128 = CKM_JUNIPER_CBC128
	, JUNIPER_COUNTER = CKM_JUNIPER_COUNTER
	, JUNIPER_SHUFFLE = CKM_JUNIPER_SHUFFLE
	, JUNIPER_WRAP = CKM_JUNIPER_WRAP
	, FASTHASH = CKM_FASTHASH

	, AES_KEY_GEN = CKM_AES_KEY_GEN
	, AES_ECB = CKM_AES_ECB
	, AES_CBC = CKM_AES_CBC
	, AES_MAC = CKM_AES_MAC
	, AES_MAC_GENERAL = CKM_AES_MAC_GENERAL
	, AES_CBC_PAD = CKM_AES_CBC_PAD
	, AES_CTR = CKM_AES_CTR
	, AES_GCM = CKM_AES_GCM
	, AES_CCM = CKM_AES_CCM
	, AES_CTS = CKM_AES_CTS
	, AES_CMAC = CKM_AES_CMAC
	, AES_CMAC_GENERAL = CKM_AES_CMAC_GENERAL

	, AES_XCBC_MAC = CKM_AES_XCBC_MAC
	, AES_XCBC_MAC_96 = CKM_AES_XCBC_MAC_96
	, AES_GMAC = CKM_AES_GMAC

	, BLOWFISH_KEY_GEN = CKM_BLOWFISH_KEY_GEN
	, BLOWFISH_CBC = CKM_BLOWFISH_CBC
	, TWOFISH_KEY_GEN = CKM_TWOFISH_KEY_GEN
	, TWOFISH_CBC = CKM_TWOFISH_CBC
	, BLOWFISH_CBC_PAD = CKM_BLOWFISH_CBC_PAD
	, TWOFISH_CBC_PAD = CKM_TWOFISH_CBC_PAD

	, DES_ECB_ENCRYPT_DATA = CKM_DES_ECB_ENCRYPT_DATA
	, DES_CBC_ENCRYPT_DATA = CKM_DES_CBC_ENCRYPT_DATA
	, DES3_ECB_ENCRYPT_DATA = CKM_DES3_ECB_ENCRYPT_DATA
	, DES3_CBC_ENCRYPT_DATA = CKM_DES3_CBC_ENCRYPT_DATA
	, AES_ECB_ENCRYPT_DATA = CKM_AES_ECB_ENCRYPT_DATA
	, AES_CBC_ENCRYPT_DATA = CKM_AES_CBC_ENCRYPT_DATA

	, GOSTR3410_KEY_PAIR_GEN = CKM_GOSTR3410_KEY_PAIR_GEN
	, GOSTR3410 = CKM_GOSTR3410
	, GOSTR3410_WITH_GOSTR3411 = CKM_GOSTR3410_WITH_GOSTR3411
	, GOSTR3410_KEY_WRAP = CKM_GOSTR3410_KEY_WRAP
	, GOSTR3410_DERIVE = CKM_GOSTR3410_DERIVE
	, GOSTR3411 = CKM_GOSTR3411
	, GOSTR3411_HMAC = CKM_GOSTR3411_HMAC
	, GOST28147_KEY_GEN = CKM_GOST28147_KEY_GEN
	, GOST28147_ECB = CKM_GOST28147_ECB
	, GOST28147 = CKM_GOST28147
	, GOST28147_MAC = CKM_GOST28147_MAC
	, GOST28147_KEY_WRAP = CKM_GOST28147_KEY_WRAP

	, DSA_PARAMETER_GEN = CKM_DSA_PARAMETER_GEN
	, DH_PKCS_PARAMETER_GEN = CKM_DH_PKCS_PARAMETER_GEN
	, X9_42_DH_PARAMETER_GEN = CKM_X9_42_DH_PARAMETER_GEN
	, DSA_PROBABLISTIC_PARAMETER_GEN = CKM_DSA_PROBABLISTIC_PARAMETER_GEN
	, DSA_SHAWE_TAYLOR_PARAMETER_GEN = CKM_DSA_SHAWE_TAYLOR_PARAMETER_GEN

	, AES_OFB = CKM_AES_OFB
	, AES_CFB64 = CKM_AES_CFB64
	, AES_CFB8 = CKM_AES_CFB8
	, AES_CFB128 = CKM_AES_CFB128

	, AES_CFB1 = CKM_AES_CFB1
	, AES_KEY_WRAP = CKM_AES_KEY_WRAP
	, AES_KEY_WRAP_PAD = CKM_AES_KEY_WRAP_PAD

	, RSA_PKCS_TPM_1_1 = CKM_RSA_PKCS_TPM_1_1
	, RSA_PKCS_OAEP_TPM_1_1 = CKM_RSA_PKCS_OAEP_TPM_1_1

	, VENDOR_DEFINED = CKM_VENDOR_DEFINED
};
UNDERLYING_TYPE(Mechanism, flame_ide::pkcs11::value_types::Mechanism)


/// @brief The MechanismFlags enum
enum class MechanismFlags : flame_ide::pkcs11::value_types::Flags
{
	HW = CKF_HW

	, ENCRYPT = CKF_ENCRYPT
	, DECRYPT = CKF_DECRYPT
	, DIGEST = CKF_DIGEST
	, SIGN = CKF_SIGN
	, SIGN_RECOVER = CKF_SIGN_RECOVER
	, VERIFY = CKF_VERIFY
	, VERIFY_RECOVER = CKF_VERIFY_RECOVER
	, GENERATE = CKF_GENERATE
	, GENERATE_KEY_PAIR = CKF_GENERATE_KEY_PAIR
	, WRAP = CKF_WRAP
	, UNWRAP = CKF_UNWRAP
	, DERIVE = CKF_DERIVE

	, EC_F_P = CKF_EC_F_P
	, EC_F_2M = CKF_EC_F_2M
	, EC_ECPARAMETERS = CKF_EC_ECPARAMETERS
	, EC_NAMEDCURVE = CKF_EC_NAMEDCURVE
	, EC_UNCOMPRESS = CKF_EC_UNCOMPRESS
	, EC_COMPRESS = CKF_EC_COMPRESS

	, EXTENSION = CKF_EXTENSION
};
UNDERLYING_TYPE(MechanismFlags, flame_ide::pkcs11::value_types::Flags)
FLAG_OPERATORS(MechanismFlags)


/// @brief The ReturnType enum
enum class ReturnType : flame_ide::pkcs11::value_types::ReturnType
{
	OK = CKR_OK
	, CANCEL = CKR_CANCEL
	, HOST_MEMORY = CKR_HOST_MEMORY
	, SLOT_ID_INVALID = CKR_SLOT_ID_INVALID

	, GENERAL_ERROR = CKR_GENERAL_ERROR
	, FUNCTION_FAILED = CKR_FUNCTION_FAILED

	, ARGUMENTS_BAD = CKR_ARGUMENTS_BAD
	, NO_EVENT = CKR_NO_EVENT
	, NEED_TO_CREATE_THREADS = CKR_NEED_TO_CREATE_THREADS
	, CANT_LOCK = CKR_CANT_LOCK

	, ATTRIBUTE_READ_ONLY = CKR_ATTRIBUTE_READ_ONLY
	, ATTRIBUTE_SENSITIVE = CKR_ATTRIBUTE_SENSITIVE
	, ATTRIBUTE_TYPE_INVALID = CKR_ATTRIBUTE_TYPE_INVALID
	, ATTRIBUTE_VALUE_INVALID = CKR_ATTRIBUTE_VALUE_INVALID

	, ACTION_PROHIBITED = CKR_ACTION_PROHIBITED

	, DATA_INVALID = CKR_DATA_INVALID
	, DATA_LEN_RANGE = CKR_DATA_LEN_RANGE
	, DEVICE_ERROR = CKR_DEVICE_ERROR
	, DEVICE_MEMORY = CKR_DEVICE_MEMORY
	, DEVICE_REMOVED = CKR_DEVICE_REMOVED
	, ENCRYPTED_DATA_INVALID = CKR_ENCRYPTED_DATA_INVALID
	, ENCRYPTED_DATA_LEN_RANGE = CKR_ENCRYPTED_DATA_LEN_RANGE
	, FUNCTION_CANCELED = CKR_FUNCTION_CANCELED
	, FUNCTION_NOT_PARALLEL = CKR_FUNCTION_NOT_PARALLEL

	, FUNCTION_NOT_SUPPORTED = CKR_FUNCTION_NOT_SUPPORTED

	, KEY_HANDLE_INVALID = CKR_KEY_HANDLE_INVALID

	, KEY_SIZE_RANGE = CKR_KEY_SIZE_RANGE
	, KEY_TYPE_INCONSISTENT = CKR_KEY_TYPE_INCONSISTENT

	, KEY_NOT_NEEDED = CKR_KEY_NOT_NEEDED
	, KEY_CHANGED = CKR_KEY_CHANGED
	, KEY_NEEDED = CKR_KEY_NEEDED
	, KEY_INDIGESTIBLE = CKR_KEY_INDIGESTIBLE
	, KEY_FUNCTION_NOT_PERMITTED = CKR_KEY_FUNCTION_NOT_PERMITTED
	, KEY_NOT_WRAPPABLE = CKR_KEY_NOT_WRAPPABLE
	, KEY_UNEXTRACTABLE = CKR_KEY_UNEXTRACTABLE

	, MECHANISM_INVALID = CKR_MECHANISM_INVALID
	, MECHANISM_PARAM_INVALID = CKR_MECHANISM_PARAM_INVALID

	, OBJECT_HANDLE_INVALID = CKR_OBJECT_HANDLE_INVALID
	, OPERATION_ACTIVE = CKR_OPERATION_ACTIVE
	, OPERATION_NOT_INITIALIZED = CKR_OPERATION_NOT_INITIALIZED
	, PIN_INCORRECT = CKR_PIN_INCORRECT
	, PIN_INVALID = CKR_PIN_INVALID
	, PIN_LEN_RANGE = CKR_PIN_LEN_RANGE

	, PIN_EXPIRED = CKR_PIN_EXPIRED
	, PIN_LOCKED = CKR_PIN_LOCKED

	, SESSION_CLOSED = CKR_SESSION_CLOSED
	, SESSION_COUNT = CKR_SESSION_COUNT
	, SESSION_HANDLE_INVALID = CKR_SESSION_HANDLE_INVALID
	, SESSION_PARALLEL_NOT_SUPPORTED = CKR_SESSION_PARALLEL_NOT_SUPPORTED
	, SESSION_READ_ONLY = CKR_SESSION_READ_ONLY
	, SESSION_EXISTS = CKR_SESSION_EXISTS

	, SESSION_READ_ONLY_EXISTS = CKR_SESSION_READ_ONLY_EXISTS
	, SESSION_READ_WRITE_SO_EXISTS = CKR_SESSION_READ_WRITE_SO_EXISTS

	, SIGNATURE_INVALID = CKR_SIGNATURE_INVALID
	, SIGNATURE_LEN_RANGE = CKR_SIGNATURE_LEN_RANGE
	, TEMPLATE_INCOMPLETE = CKR_TEMPLATE_INCOMPLETE
	, TEMPLATE_INCONSISTENT = CKR_TEMPLATE_INCONSISTENT
	, TOKEN_NOT_PRESENT = CKR_TOKEN_NOT_PRESENT
	, TOKEN_NOT_RECOGNIZED = CKR_TOKEN_NOT_RECOGNIZED
	, TOKEN_WRITE_PROTECTED = CKR_TOKEN_WRITE_PROTECTED
	, UNWRAPPING_KEY_HANDLE_INVALID = CKR_UNWRAPPING_KEY_HANDLE_INVALID
	, UNWRAPPING_KEY_SIZE_RANGE = CKR_UNWRAPPING_KEY_SIZE_RANGE
	, UNWRAPPING_KEY_TYPE_INCONSISTENT = CKR_UNWRAPPING_KEY_TYPE_INCONSISTENT
	, USER_ALREADY_LOGGED_IN = CKR_USER_ALREADY_LOGGED_IN
	, USER_NOT_LOGGED_IN = CKR_USER_NOT_LOGGED_IN
	, USER_PIN_NOT_INITIALIZED = CKR_USER_PIN_NOT_INITIALIZED
	, USER_TYPE_INVALID = CKR_USER_TYPE_INVALID

	, USER_ANOTHER_ALREADY_LOGGED_IN = CKR_USER_ANOTHER_ALREADY_LOGGED_IN
	, USER_TOO_MANY_TYPES = CKR_USER_TOO_MANY_TYPES

	, WRAPPED_KEY_INVALID = CKR_WRAPPED_KEY_INVALID
	, WRAPPED_KEY_LEN_RANGE = CKR_WRAPPED_KEY_LEN_RANGE
	, WRAPPING_KEY_HANDLE_INVALID = CKR_WRAPPING_KEY_HANDLE_INVALID
	, WRAPPING_KEY_SIZE_RANGE = CKR_WRAPPING_KEY_SIZE_RANGE
	, WRAPPING_KEY_TYPE_INCONSISTENT = CKR_WRAPPING_KEY_TYPE_INCONSISTENT
	, RANDOM_SEED_NOT_SUPPORTED = CKR_RANDOM_SEED_NOT_SUPPORTED

	, RANDOM_NO_RNG = CKR_RANDOM_NO_RNG

	, DOMAIN_PARAMS_INVALID = CKR_DOMAIN_PARAMS_INVALID

	, CURVE_NOT_SUPPORTED = CKR_CURVE_NOT_SUPPORTED

	, BUFFER_TOO_SMALL = CKR_BUFFER_TOO_SMALL
	, SAVED_STATE_INVALID = CKR_SAVED_STATE_INVALID
	, INFORMATION_SENSITIVE = CKR_INFORMATION_SENSITIVE
	, STATE_UNSAVEABLE = CKR_STATE_UNSAVEABLE

	, CRYPTOKI_NOT_INITIALIZED = CKR_CRYPTOKI_NOT_INITIALIZED
	, CRYPTOKI_ALREADY_INITIALIZED = CKR_CRYPTOKI_ALREADY_INITIALIZED
	, MUTEX_BAD = CKR_MUTEX_BAD
	, MUTEX_NOT_LOCKED = CKR_MUTEX_NOT_LOCKED

	, NEW_PIN_MODE = CKR_NEW_PIN_MODE
	, NEXT_OTP = CKR_NEXT_OTP

	, EXCEEDED_MAX_ITERATIONS = CKR_EXCEEDED_MAX_ITERATIONS
	, FIPS_SELF_TEST_FAILED = CKR_FIPS_SELF_TEST_FAILED
	, LIBRARY_LOAD_FAILED = CKR_LIBRARY_LOAD_FAILED
	, PIN_TOO_WEAK = CKR_PIN_TOO_WEAK
	, PUBLIC_KEY_INVALID = CKR_PUBLIC_KEY_INVALID

	, FUNCTION_REJECTED = CKR_FUNCTION_REJECTED

	, VENDOR_DEFINED = CKR_VENDOR_DEFINED
};
UNDERLYING_TYPE(ReturnType, flame_ide::pkcs11::value_types::ReturnType)


/// @brief The InitializeArgsFlags enum
enum class InitializeArgsFlags : flame_ide::pkcs11::value_types::Flags
{
	LIBRARY_CANT_CREATE_OS_THREADS = CKF_LIBRARY_CANT_CREATE_OS_THREADS
	, OS_LOCKING_OK = CKF_OS_LOCKING_OK
};
UNDERLYING_TYPE(InitializeArgsFlags, flame_ide::pkcs11::value_types::Flags)
FLAG_OPERATORS(InitializeArgsFlags)


/// @brief The WaitForSlotEventFlags enum
enum class WaitForSlotEventFlags : flame_ide::pkcs11::value_types::Flags
{
	DO_BLOCK = 0
	, DONT_BLOCK = CKF_DONT_BLOCK
};
UNDERLYING_TYPE(WaitForSlotEventFlags, flame_ide::pkcs11::value_types::Flags)
FLAG_OPERATORS(WaitForSlotEventFlags)


/// @brief The MessageGenerationFunction enum
enum class RsaMessageGenerationFunction
		: flame_ide::pkcs11::value_types::RsaPkcsMessageGenerationFunction
{
	SHA1 = CKG_MGF1_SHA1
	, SHA256 = CKG_MGF1_SHA256
	, SHA384 = CKG_MGF1_SHA384
	, SHA512 = CKG_MGF1_SHA512
	, SHA224 = CKG_MGF1_SHA224
};
UNDERLYING_TYPE(RsaMessageGenerationFunction
		, flame_ide::pkcs11::value_types::RsaPkcsMessageGenerationFunction)


/// @brief The RsaPkcsOaepSource enum
enum class RsaPkcsOaepSource : flame_ide::pkcs11::value_types::RsaPkcsOaepSource
{
	DATA_SPECIFIED = CKZ_DATA_SPECIFIED
};
UNDERLYING_TYPE(RsaPkcsOaepSource, flame_ide::pkcs11::value_types::RsaPkcsOaepSource)


/// @brief The EcKdf enum
enum class EcKdf : flame_ide::pkcs11::value_types::EcKdf
{
	NULL = CKD_NULL
	, SHA1 = CKD_SHA1_KDF

	, SHA1_ASN1 = CKD_SHA1_KDF_ASN1
	, SHA1_CONCATENATE = CKD_SHA1_KDF_CONCATENATE
	, SHA224 = CKD_SHA224_KDF
	, SHA256 = CKD_SHA256_KDF
	, SHA384 = CKD_SHA384_KDF
	, SHA512 = CKD_SHA512_KDF
	, CPDIVERSIFY = CKD_CPDIVERSIFY_KDF
};
UNDERLYING_TYPE(EcKdf, flame_ide::pkcs11::value_types::EcKdf)


/// @brief The Pkcs5Pbkd2PseudoRandomFunction enum
enum class Pkcs5Pbkd2PseudoRandomFunction :
		flame_ide::pkcs11::value_types::Pkcs5Pbkd2PseudoRandomFunction
{
	SHA1 = CKP_PKCS5_PBKD2_HMAC_SHA1
	, GOSTR3411 = CKP_PKCS5_PBKD2_HMAC_GOSTR3411
	, SHA224 = CKP_PKCS5_PBKD2_HMAC_SHA224
	, SHA256 = CKP_PKCS5_PBKD2_HMAC_SHA256
	, SHA384 = CKP_PKCS5_PBKD2_HMAC_SHA384
	, SHA512 = CKP_PKCS5_PBKD2_HMAC_SHA512
	, SHA512_224 = CKP_PKCS5_PBKD2_HMAC_SHA512_224
	, SHA512_256 = CKP_PKCS5_PBKD2_HMAC_SHA512_256
};
UNDERLYING_TYPE(Pkcs5Pbkd2PseudoRandomFunction,
		flame_ide::pkcs11::value_types::Pkcs5Pbkd2PseudoRandomFunction)


/// @brief The Pkcs5Pbkdf2SaltSource enum
enum class Pkcs5Pbkdf2SaltSource : flame_ide::pkcs11::value_types::Pkcs5Pbkdf2SaltSource
{
	SPECIFIED = CKZ_SALT_SPECIFIED
};
UNDERLYING_TYPE(Pkcs5Pbkdf2SaltSource,
		flame_ide::pkcs11::value_types::Pkcs5Pbkdf2SaltSource)


/// @brief The OtpParam enum
enum class OtpParam : flame_ide::pkcs11::value_types::OtpParam
{
	VALUE = CK_OTP_VALUE
	, PIN = CK_OTP_PIN
	, CHALLENGE = CK_OTP_CHALLENGE
	, TIME = CK_OTP_TIME
	, COUNTER = CK_OTP_COUNTER
	, FLAGS = CK_OTP_FLAGS
	, OUTPUT_LENGTH = CK_OTP_OUTPUT_LENGTH
	, OUTPUT_FORMAT = CK_OTP_OUTPUT_FORMAT
};
UNDERLYING_TYPE(OtpParam, flame_ide::pkcs11::value_types::OtpParam)


/// @brief The OtpParamFlags enum
enum class OtpParamFlags : flame_ide::pkcs11::value_types::Flags
{
	NEXT_OTP = CKF_NEXT_OTP
	, EXCLUDE_TIME = CKF_EXCLUDE_TIME
	, EXCLUDE_COUNTER = CKF_EXCLUDE_COUNTER
	, EXCLUDE_CHALLENGE = CKF_EXCLUDE_CHALLENGE
	, EXCLUDE_PIN = CKF_EXCLUDE_PIN
	, USER_FRIENDLY_OTP = CKF_USER_FRIENDLY_OTP
};
UNDERLYING_TYPE(OtpParamFlags, flame_ide::pkcs11::value_types::Flags)
FLAG_OPERATORS(OtpParamFlags)


#undef FLAG_OPERATORS
#undef OPERATOR
#undef UNDERLYING_TYPE

} // namespace enums
} // namespace pkcs11
} // namespace flame_ide

namespace flame_ide
{
namespace pkcs11
{
namespace enums
{

/// @brief value
/// @tparam EnumType
/// @param enumValue
template<typename EnumType>
constexpr typename utils::UnderlyingType<EnumType>::Type
value(EnumType enumValue) noexcept
{
	auto realValue = static_cast<
		typename utils::UnderlyingType<EnumType>::Type
	>(enumValue);
	return realValue;
}

template<typename EnumType>
constexpr typename utils::UnderlyingType<EnumType>::Type &
reference(EnumType &enumValue) noexcept
{
	auto realValue = reinterpret_cast<
		typename utils::UnderlyingType<EnumType>::Type *
	>(&enumValue);
	return *realValue;
}

template<typename EnumType>
constexpr EnumType &
reference(typename utils::UnderlyingType<EnumType>::Type &value) noexcept
{
	auto realValue = reinterpret_cast<EnumType *>(&value);
	return *realValue;
}

template<typename EnumType>
constexpr const typename utils::UnderlyingType<EnumType>::Type &
reference(const EnumType &enumValue) noexcept
{
	auto realValue = reinterpret_cast<
		const typename utils::UnderlyingType<EnumType>::Type *
	>(&enumValue);
	return *realValue;
}

template<typename EnumType>
constexpr const EnumType &
reference(const typename utils::UnderlyingType<EnumType>::Type &value) noexcept
{
	auto realValue = reinterpret_cast<const EnumType *>(&value);
	return *realValue;
}


} // namespace enums
} // namespace pkcs11
} // namespace flame_ide

#endif // FLAMEDE_CRYPTO_PKCS11_TYPES_ENUMS_HPP
