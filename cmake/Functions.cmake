function(create_alias_name CURRENT_PROJECT_NAME ALIASED_NAME)
	string(REPLACE "${FLAME_NAME_SEPARATOR}" "${FLAME_ALIAS_SEPARATOR}" ${ALIASED_NAME} ${${CURRENT_PROJECT_NAME}})
	set(${ALIASED_NAME} ${${ALIASED_NAME}} PARENT_SCOPE)
endfunction(create_alias_name)

function(create_library_alias TARGET_NAME TARGET_ALIAS)
	add_library(${TARGET_ALIAS} ALIAS ${TARGET_NAME})
endfunction(create_library_alias)


function(header_library)
	set(OPTIONS "DEBUG")
	set(VALUES
			"LIBRARY_NAME"
			"LIBRARY_ALIAS_NAME"

			"HEADER_LIST_FILE"

			"INCLUDE_PATH"
	)
	set(LISTS "DEPENDENCY_LIST")
	cmake_parse_arguments("HEADER"
		"${OPTIONS}" "${VALUES}" "${LISTS}" "${ARGN}"
	)

	if (HEADER_DEBUG)
		message("HEADER_LIBRARY_NAME       = ${HEADER_LIBRARY_NAME}")
		message("HEADER_LIBRARY_ALIAS_NAME = ${HEADER_LIBRARY_ALIAS_NAME}")
		message("HEADER_HEADER_LIST_FILE   = ${HEADER_HEADER_LIST_FILE}")
		message("HEADER_INCLUDE_PATH       = ${HEADER_INCLUDE_PATH}")
		message("HEADER_DEPENDENCY_LIST    = ${HEADER_DEPENDENCY_LIST}")
	endif()

	set(RESULT_TARGET_NAME)
	if (EXISTS "${HEADER_HEADER_LIST_FILE}")
		include(${HEADER_HEADER_LIST_FILE})
	else()
		message(FATAL_ERROR "Need header list file with 'HEADER_LIST' variable.")
	endif()

	if (${FLAME_SHOW_HEADERS_AS_TARGET})
		set(FAKE_TARGET_NAME
			"${HEADER_LIBRARY_NAME}${FLAME_NAME_SEPARATOR}${FLAME_FAKE_HEADER_MODULE_SUFFIX}"
		)
		add_custom_target(
				${FAKE_TARGET_NAME}
				SOURCES ${HEADER_LIST}
		)
		set_property(
			TARGET ${FAKE_TARGET_NAME}
			PROPERTY
				INCLUDE_DIRECTORIES ${INCLUDE_DIRECTORIES}
		)
	endif()

	set(TARGET_NAME
		"${HEADER_LIBRARY_NAME}${FLAME_NAME_SEPARATOR}${FLAME_HEADER_MODULE_SUFFIX}"
	)
	add_library(${TARGET_NAME} INTERFACE)
	target_sources(${TARGET_NAME} INTERFACE "$<BUILD_INTERFACE:${HEADER_LIST}>")
	target_include_directories(${TARGET_NAME} INTERFACE ${HEADER_INCLUDE_PATH})
	if (HEADER_DEPENDENCY_LIST)
		target_link_libraries(${TARGET_NAME} INTERFACE ${HEADER_DEPENDENCY_LIST})
	endif()
	if (HEADER_LIBRARY_ALIAS_NAME)
		create_library_alias(${TARGET_NAME} ${HEADER_LIBRARY_ALIAS_NAME})
	endif()
	if (HEADER_DEPENDENCY_LIST)
		add_dependencies(${TARGET_NAME} ${HEADER_DEPENDENCY_LIST})
	endif()

endfunction(header_library)


function(compile_library)
	set(OPTIONS
			"DEBUG"
			"CREATE_STATIC_LIBRARY"
			"CREATE_SHARED_LIBRARY"
	)
	set(VALUES
			"LIBRARY_NAME"

			"LIBRARY_OBJECT_ALIAS_NAME"
			"LIBRARY_STATIC_ALIAS_NAME"
			"LIBRARY_SHARED_ALIAS_NAME"

			"SOURCE_LIST_FILE"
			"INCLUDE_PATH"
	)
	set(LISTS
			"DEPENDENCY_HEADER_LIST"
			"DEPENDENCY_OBJECT_LIST"
			"DEPENDENCY_STATIC_LIST"
			"DEPENDENCY_SHARED_LIST"
	)
	cmake_parse_arguments("COMPILE"
		"${OPTIONS}" "${VALUES}" "${LISTS}" "${ARGN}"
	)
	if (COMPILE_DEBUG)
		message("COMPILE_LIBRARY_NAME              = ${COMPILE_LIBRARY_NAME}")

		message("COMPILE_CREATE_STATIC_LIBRARY     = ${COMPILE_CREATE_STATIC_LIBRARY}")
		message("COMPILE_CREATE_SHARED_LIBRARY     = ${COMPILE_CREATE_SHARED_LIBRARY}")

		message("COMPILE_LIBRARY_OBJECT_ALIAS_NAME = ${COMPILE_LIBRARY_OBJECT_ALIAS_NAME}")
		message("COMPILE_LIBRARY_STATIC_ALIAS_NAME = ${COMPILE_LIBRARY_STATIC_ALIAS_NAME}")
		message("COMPILE_LIBRARY_SHARED_ALIAS_NAME = ${COMPILE_LIBRARY_SHARED_ALIAS_NAME}")

		message("COMPILE_SOURCE_LIST_FILE          = ${COMPILE_SOURCE_LIST_FILE}")
		message("COMPILE_INCLUDE_PATH              = ${COMPILE_INCLUDE_PATH}")

		message("COMPILE_DEPENDENCY_HEADER_LIST    = ${COMPILE_DEPENDENCY_HEADER_LIST}")
		message("COMPILE_DEPENDENCY_OBJECT_LIST    = ${COMPILE_DEPENDENCY_OBJECT_LIST}")
		message("COMPILE_DEPENDENCY_STATIC_LIST    = ${COMPILE_DEPENDENCY_STATIC_LIST}")
		message("COMPILE_DEPENDENCY_SHARED_LIST    = ${COMPILE_DEPENDENCY_SHARED_LIST}")
	endif()

	if (EXISTS ${COMPILE_SOURCE_LIST_FILE})
		include(${COMPILE_SOURCE_LIST_FILE})
	endif()

	set(TARGET_NAME_OBJECT
		"${COMPILE_LIBRARY_NAME}${FLAME_NAME_SEPARATOR}${FLAME_OBJECT_MODULE_SUFFIX}"
	)
	add_library(${TARGET_NAME_OBJECT} OBJECT ${SOURCE_LIST})
	set_property(TARGET ${TARGET_NAME_OBJECT} PROPERTY POSITION_INDEPENDENT_CODE ON)
	if (COMPILE_DEPENDENCY_HEADER_LIST)
		target_link_libraries(${TARGET_NAME_OBJECT} ${COMPILE_DEPENDENCY_HEADER_LIST})
	endif()
	if (COMPILE_INCLUDE_PATH)
		target_include_directories(${TARGET_NAME_OBJECT} PUBLIC ${COMPILE_INCLUDE_PATH})
	endif()
	if (COMPILE_DEPENDENCY_HEADER_LIST)
		add_dependencies(${TARGET_NAME_OBJECT} ${COMPILE_DEPENDENCY_HEADER_LIST})
	endif()
	if (COMPILE_DEPENDENCY_OBJECT_LIST)
		add_dependencies(${TARGET_NAME_OBJECT} ${COMPILE_DEPENDENCY_OBJECT_LIST})
	endif()
	if (COMPILE_LIBRARY_OBJECT_ALIAS_NAME)
		create_library_alias(${TARGET_NAME_OBJECT} ${COMPILE_LIBRARY_OBJECT_ALIAS_NAME})
	endif()
	set(TARGET_NAME_OBJECT "$<TARGET_OBJECTS:${TARGET_NAME_OBJECT}>")

	if (COMPILE_CREATE_STATIC_LIBRARY)
		set(TARGET_NAME_STATIC
			"${COMPILE_LIBRARY_NAME}${FLAME_NAME_SEPARATOR}${FLAME_STATIC_MODULE_SUFFIX}"
		)
		add_library(${TARGET_NAME_STATIC} STATIC ${TARGET_NAME_OBJECT})
		if (COMPILE_DEPENDENCY_STATIC_LIST)
			target_link_libraries(${TARGET_NAME_STATIC} ${COMPILE_DEPENDENCY_STATIC_LIST})
		endif()
		if (COMPILE_LIBRARY_STATIC_ALIAS_NAME)
			create_library_alias(
				${TARGET_NAME_STATIC}
				${COMPILE_LIBRARY_STATIC_ALIAS_NAME}
			)
		endif()
	endif()

	if (COMPILE_CREATE_SHARED_LIBRARY)
		set(TARGET_NAME_SHARED
			"${COMPILE_LIBRARY_NAME}${FLAME_NAME_SEPARATOR}${FLAME_SHARED_MODULE_SUFFIX}"
		)
		add_library(${TARGET_NAME_SHARED} SHARED ${TARGET_NAME_OBJECT})
		if (COMPILE_DEPENDENCY_SHARED_LIST)
			target_link_libraries(
				${TARGET_NAME_SHARED} ${COMPILE_DEPENDENCY_SHARED_LIST}
			)
		endif()
		if (COMPILE_LIBRARY_STATIC_ALIAS_NAME)
			create_library_alias(
				${TARGET_NAME_STATIC}
				${COMPILE_LIBRARY_SHARED_ALIAS_NAME}
			)
		endif()

		# Нужны депенденси
	endif()

endfunction(compile_library)
