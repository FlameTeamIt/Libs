function(create_library_alias TARGET_NAME TARGET_ALIAS)
	add_library(${TARGET_ALIAS} ALIAS ${TARGET_NAME})
endfunction(create_library_alias)


function(header_library)
	set(OPTIONS "DEBUG")
	set(VALUES
			"LIBRARY_NAME"
			"LIBRARY_ALIAS_NAME"

			"HEADER_LIST_FILE"

			"INCLUDE_PATH"
	)
	set(LISTS "DEPENDENCY_LIST")
	cmake_parse_arguments("HEADER"
		"${OPTIONS}" "${VALUES}" "${LISTS}" "${ARGN}"
	)

	if (HEADER_DEBUG)
		message("HEADER_LIBRARY_NAME       = ${HEADER_LIBRARY_NAME}")
		message("HEADER_LIBRARY_ALIAS_NAME = ${HEADER_LIBRARY_ALIAS_NAME}")
		message("HEADER_HEADER_LIST_FILE   = ${HEADER_HEADER_LIST_FILE}")
		message("HEADER_INCLUDE_PATH       = ${HEADER_INCLUDE_PATH}")
		message("HEADER_DEPENDENCY_LIST    = ${HEADER_DEPENDENCY_LIST}")
	endif()

	set(RESULT_TARGET_NAME)
	if (EXISTS "${HEADER_HEADER_LIST_FILE}")
		include(${HEADER_HEADER_LIST_FILE})
	else()
		message(FATAL_ERROR "Need header list file with 'HEADER_LIST' variable.")
	endif()

	if (FLAME_SHOW_HEADERS_AS_TARGET)
		set(FAKE_TARGET_NAME
			"${HEADER_LIBRARY_NAME}${FLAME_NAME_SEPARATOR}${FLAME_FAKE_HEADER_MODULE_SUFFIX}"
		)
		add_custom_target(
				${FAKE_TARGET_NAME}
				SOURCES ${HEADER_LIST}
		)
	endif()

	set(TARGET_NAME
		"${HEADER_LIBRARY_NAME}${FLAME_NAME_SEPARATOR}${FLAME_HEADER_MODULE_SUFFIX}"
	)
	add_library(${TARGET_NAME} INTERFACE)
	target_sources(${TARGET_NAME} INTERFACE "$<BUILD_INTERFACE:${HEADER_LIST}>")
	target_include_directories(${TARGET_NAME} INTERFACE ${HEADER_INCLUDE_PATH})
	if (HEADER_DEPENDENCY_LIST)
		target_link_libraries(${TARGET_NAME} INTERFACE ${HEADER_DEPENDENCY_LIST})
	endif()
	if (HEADER_LIBRARY_ALIAS_NAME)
		create_library_alias(${TARGET_NAME} ${HEADER_LIBRARY_ALIAS_NAME})
	endif()
	if (HEADER_DEPENDENCY_LIST)
		add_dependencies(${TARGET_NAME} ${HEADER_DEPENDENCY_LIST})
	endif()

	add_to_global_property(FLAME_HEADER_TARGETS ${TARGET_NAME})
endfunction(header_library)


function(inetrnal_compile_object_library)
	set(OPTIONS "DEBUG")

	set(VALUES
		"LIBRARY_NAME"
		"LIBRARY_ALIAS_NAME"
		"RETURN_TARGET_NAME"
	)

	set(LISTS
		"INCLUDE_PATH"
		"SOURCE_LIST"
		"DEPENDENCY_HEADER_LIST"
		"DEPENDENCY_OBJECT_LIST"
	)

	cmake_parse_arguments("OBJECT"
		"${OPTIONS}" "${VALUES}" "${LISTS}" "${ARGN}"
	)
	if (OBJECT_DEBUG)
		message("OBJECT_LIBRARY_NAME           = ${OBJECT_LIBRARY_NAME}")
		message("OBJECT_LIBRARY_ALIAS_NAME     = ${OBJECT_LIBRARY_ALIAS_NAME}")
		message("OBJECT_INCLUDE_PATH           = ${OBJECT_INCLUDE_PATH}")
		message("OBJECT_SOURCE_LIST            = ${OBJECT_SOURCE_LIST}")
		message("OBJECT_DEPENDENCY_HEADER_LIST = ${OBJECT_DEPENDENCY_HEADER_LIST}")
		message("OBJECT_DEPENDENCY_OBJECT_LIST = ${OBJECT_DEPENDENCY_OBJECT_LIST}")
		message("OBJECT_RETURN_TARGET_NAME     = ${OBJECT_RETURN_TARGET_NAME}")
	endif()

	set(TARGET_NAME_OBJECT
		"${OBJECT_LIBRARY_NAME}${FLAME_NAME_SEPARATOR}${FLAME_OBJECT_MODULE_SUFFIX}"
	)
	add_library(${TARGET_NAME_OBJECT} OBJECT ${OBJECT_SOURCE_LIST})
	set_property(TARGET ${TARGET_NAME_OBJECT} PROPERTY POSITION_INDEPENDENT_CODE ON)
	if (OBJECT_DEPENDENCY_HEADER_LIST)
		target_link_libraries(${TARGET_NAME_OBJECT} ${COMPILE_DEPENDENCY_HEADER_LIST})
	endif()
	if (OBJECT_INCLUDE_PATH)
		target_include_directories(${TARGET_NAME_OBJECT} PUBLIC ${COMPILE_INCLUDE_PATH})
	endif()
	if (OBJECT_DEPENDENCY_HEADER_LIST)
		add_dependencies(${TARGET_NAME_OBJECT} ${COMPILE_DEPENDENCY_HEADER_LIST})
	endif()
	if (OBJECT_DEPENDENCY_OBJECT_LIST)
		add_dependencies(${TARGET_NAME_OBJECT} ${COMPILE_DEPENDENCY_OBJECT_LIST})
	endif()
	if (OBJECT_LIBRARY_ALIAS_NAME)
		create_library_alias(${TARGET_NAME_OBJECT} ${COMPILE_LIBRARY_OBJECT_ALIAS_NAME})
	endif()
	if (OBJECT_RETURN_TARGET_NAME)
		set(${OBJECT_RETURN_TARGET_NAME} "$<TARGET_OBJECTS:${TARGET_NAME_OBJECT}>" PARENT_SCOPE)
	endif()
endfunction(inetrnal_compile_object_library)


function(inetrnal_compile_static_library)
	set(OPTIONS "DEBUG")
	set(VALUES
		"LIBRARY_NAME"
		"LIBRARY_ALIAS_NAME"
		"OBJECT_LIBRARY"
		"RETURN_TARGET_NAME"
	)
	set(LISTS
		"DEPENDENCY_OBJECT_LIST"
		"DEPENDENCY_STATIC_LIST"
	)
	cmake_parse_arguments("STATIC"
		"${OPTIONS}" "${VALUES}" "${LISTS}" "${ARGN}"
	)
	if (STATIC_DEBUG)
		message("STATIC_LIBRARY_NAME           = ${STATIC_LIBRARY_NAME}")
		message("STATIC_LIBRARY_ALIAS_NAME     = ${STATIC_LIBRARY_ALIAS_NAME}")
		message("STATIC_OBJECT_LIBRARY         = ${STATIC_OBJECT_LIBRARY}")
		message("STATIC_DEPENDENCY_OBJECT_LIST = ${STATIC_DEPENDENCY_OBJECT_LIST}")
		message("STATIC_DEPENDENCY_STATIC_LIST = ${STATIC_DEPENDENCY_STATIC_LIST}")
		message("STATIC_RETURN_TARGET_NAME     = ${STATIC_RETURN_TARGET_NAME}")
	endif()

	set(TARGET_NAME_STATIC
		"${STATIC_LIBRARY_NAME}${FLAME_NAME_SEPARATOR}${FLAME_STATIC_MODULE_SUFFIX}"
	)
	add_library(${TARGET_NAME_STATIC} STATIC ${STATIC_OBJECT_LIBRARY})
	set_target_properties(${TARGET_NAME_STATIC} PROPERTIES
		OUTPUT_NAME "${FLAME_NAMESPACE}${STATIC_LIBRARY_NAME}"
	)

	if (STATIC_DEPENDENCY_STATIC_LIST)
		target_link_libraries(${TARGET_NAME_STATIC} ${STATIC_DEPENDENCY_STATIC_LIST})
	endif()

	if (STATIC_LIBRARY_ALIAS_NAME)
		create_library_alias(${TARGET_NAME_STATIC} ${STATIC_LIBRARY_ALIAS_NAME})
	endif()

	if (STATIC_RETURN_TARGET_NAME)
		set(${STATIC_RETURN_TARGET_NAME} ${TARGET_NAME_STATIC} PARENT_SCOPE)
	endif()
endfunction(inetrnal_compile_static_library)


function(inetrnal_compile_shared_library)
	set(OPTIONS "DEBUG")
	set(VALUES
		"LIBRARY_NAME"
		"LIBRARY_ALIAS_NAME"
		"OBJECT_LIBRARY"
		"RETURN_TARGET_NAME"
	)
	set(LISTS
		"DEPENDENCY_OBJECT_LIST"
		"DEPENDENCY_STATIC_LIST"
	)
	cmake_parse_arguments("SHARED"
		"${OPTIONS}" "${VALUES}" "${LISTS}" "${ARGN}"
	)
	if (SHARED_DEBUG)
		message("SHARED_LIBRARY_NAME           = ${SHARED_LIBRARY_NAME}")
		message("SHARED_LIBRARY_ALIAS_NAME     = ${SHARED_LIBRARY_ALIAS_NAME}")
		message("SHARED_OBJECT_LIBRARY         = ${SHARED_OBJECT_LIBRARY}")
		message("SHARED_DEPENDENCY_OBJECT_LIST = ${SHARED_DEPENDENCY_OBJECT_LIST}")
		message("SHARED_DEPENDENCY_SHARED_LIST = ${SHARED_DEPENDENCY_SHARED_LIST}")
		message("SHARED_RETURN_TARGET_NAME     = ${SHARED_RETURN_TARGET_NAME}")
	endif()

	set(TARGET_NAME_SHARED
		"${SHARED_LIBRARY_NAME}${FLAME_NAME_SEPARATOR}${FLAME_SHARED_MODULE_SUFFIX}"
	)
	add_library(${TARGET_NAME_SHARED} SHARED ${SHARED_OBJECT_LIBRARY})
	set_target_properties(${TARGET_NAME_SHARED} PROPERTIES
		OUTPUT_NAME "${FLAME_NAMESPACE}${SHARED_LIBRARY_NAME}"
	)

	if (SHARED_DEPENDENCY_SHARED_LIST)
		target_link_libraries(${TARGET_NAME_SHARED} ${SHARED_DEPENDENCY_SHARED_LIST})
	endif()

	if (SHARED_LIBRARY_ALIAS_NAME)
		create_library_alias(${TARGET_NAME_SHARED} ${SHARED_LIBRARY_ALIAS_NAME})
	endif()

	if (SHARED_RETURN_TARGET_NAME)
		set(${SHARED_RETURN_TARGET_NAME} ${TARGET_NAME_SHARED} PARENT_SCOPE)
	endif()
endfunction(inetrnal_compile_shared_library)


function(compile_library)
	set(OPTIONS
			"DEBUG"
			"CREATE_STATIC_LIBRARY"
			"CREATE_SHARED_LIBRARY"
	)
	set(VALUES
			"LIBRARY_NAME"

			"LIBRARY_OBJECT_ALIAS_NAME"
			"LIBRARY_STATIC_ALIAS_NAME"
			"LIBRARY_SHARED_ALIAS_NAME"

			"HEADER_LIST_FILE"
			"SOURCE_LIST_FILE"
	)
	set(LISTS
			"INCLUDE_PATH"

			"DEPENDENCY_HEADER_LIST"
			"DEPENDENCY_OBJECT_LIST"
			"DEPENDENCY_STATIC_LIST"
			"DEPENDENCY_SHARED_LIST"
	)
	cmake_parse_arguments("COMPILE"
		"${OPTIONS}" "${VALUES}" "${LISTS}" "${ARGN}"
	)
	if (COMPILE_DEBUG)
		message("COMPILE_LIBRARY_NAME              = ${COMPILE_LIBRARY_NAME}")

		message("COMPILE_CREATE_STATIC_LIBRARY     = ${COMPILE_CREATE_STATIC_LIBRARY}")
		message("COMPILE_CREATE_SHARED_LIBRARY     = ${COMPILE_CREATE_SHARED_LIBRARY}")

		message("COMPILE_LIBRARY_OBJECT_ALIAS_NAME = ${COMPILE_LIBRARY_OBJECT_ALIAS_NAME}")
		message("COMPILE_LIBRARY_STATIC_ALIAS_NAME = ${COMPILE_LIBRARY_STATIC_ALIAS_NAME}")
		message("COMPILE_LIBRARY_SHARED_ALIAS_NAME = ${COMPILE_LIBRARY_SHARED_ALIAS_NAME}")

		message("COMPILE_SOURCE_LIST_FILE          = ${COMPILE_SOURCE_LIST_FILE}")
		message("COMPILE_HEADER_LIST_FILE          = ${COMPILE_HEADER_LIST_FILE}")

		message("COMPILE_INCLUDE_PATH              = ${COMPILE_INCLUDE_PATH}")

		message("COMPILE_DEPENDENCY_HEADER_LIST    = ${COMPILE_DEPENDENCY_HEADER_LIST}")
		message("COMPILE_DEPENDENCY_OBJECT_LIST    = ${COMPILE_DEPENDENCY_OBJECT_LIST}")
		message("COMPILE_DEPENDENCY_STATIC_LIST    = ${COMPILE_DEPENDENCY_STATIC_LIST}")
		message("COMPILE_DEPENDENCY_SHARED_LIST    = ${COMPILE_DEPENDENCY_SHARED_LIST}")

		set(COMPILE_DEBUG DEBUG)
	endif()

	if (EXISTS ${COMPILE_SOURCE_LIST_FILE})
		include(${COMPILE_SOURCE_LIST_FILE})
	endif()
	if (EXISTS ${COMPILE_HEADER_LIST_FILE})
		include(${COMPILE_HEADER_LIST_FILE})
		list(APPEND SOURCE_LIST "${HEADER_LIST}")
	endif()

	inetrnal_compile_object_library(
		${COMPILE_DEBUG}

		LIBRARY_NAME       "${COMPILE_LIBRARY_NAME}"
		LIBRARY_ALIAS_NAME "${COMPILE_LIBRARY_OBJECT_ALIAS_NAME}"
		INCLUDE_PATH       "${COMPILE_INCLUDE_PATH}"

		SOURCE_LIST "${SOURCE_LIST}"

		DEPENDENCY_HEADER_LIST "${COMPILE_DEPENDENCY_HEADER_LIST}"
		DEPENDENCY_OBJECT_LIST "${COMPILE_DEPENDENCY_OBJECT_LIST}"

		RETURN_TARGET_NAME TARGET_NAME_OBJECT
	)

	if (COMPILE_CREATE_STATIC_LIBRARY)
		inetrnal_compile_static_library(
			${COMPILE_DEBUG}

			LIBRARY_NAME       "${COMPILE_LIBRARY_NAME}"
			LIBRARY_ALIAS_NAME "${COMPILE_LIBRARY_STATIC_ALIAS_NAME}"

			OBJECT_LIBRARY "${TARGET_NAME_OBJECT}"

			DEPENDENCY_OBJECT_LIST "${COMPILE_DEPENDENCY_OBJECT_LIST}"
			DEPENDENCY_STATIC_LIST "${COMPILE_DEPENDENCY_STATIC_LIST}"

			RETURN_TARGET_NAME TARGET_NAME_STATIC
		)
	endif()

	if (COMPILE_CREATE_SHARED_LIBRARY)
		inetrnal_compile_shared_library(
			${COMPILE_DEBUG}

			LIBRARY_NAME       "${COMPILE_LIBRARY_NAME}"
			LIBRARY_ALIAS_NAME "${COMPILE_LIBRARY_SHARED_ALIAS_NAME}"

			OBJECT_LIBRARY "${TARGET_NAME_OBJECT}"

			DEPENDENCY_OBJECT_LIST "${COMPILE_DEPENDENCY_OBJECT_LIST}"
			DEPENDENCY_SHARED_LIST "${COMPILE_DEPENDENCY_SHARED_LIST}"

			RETURN_TARGET_NAME TARGET_NAME_SHARED
		)
	endif()

endfunction(compile_library)
